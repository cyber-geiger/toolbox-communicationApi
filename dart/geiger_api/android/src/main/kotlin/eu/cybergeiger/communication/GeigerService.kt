package eu.cybergeiger.communication

import android.app.Service
import android.content.Context
import android.content.Intent
import android.os.Binder
import android.os.IBinder
import io.flutter.FlutterInjector
import io.flutter.embedding.engine.FlutterEngine
import io.flutter.embedding.engine.FlutterEngineCache
import io.flutter.embedding.engine.dart.DartExecutor
import java.lang.Exception

class GeigerService : Service() {
    companion object {
        const val ENGINE_ID = "geiger-service-engine";
        private var engine: FlutterEngine? = null
        private var engineClaims = 0;

        /**
         * Claims the [FlutterEngine] generated by [GeigerService] preventing it from being destroyed.
         * Must eventually be released with [releaseEngine].
         */
        fun claimEngine(context: Context): FlutterEngine {
            if (engine == null) {
                engine = FlutterEngine(context)
                FlutterEngineCache.getInstance().put(ENGINE_ID, engine)
                val loader = FlutterInjector.instance().flutterLoader()
                loader.startInitialization(context.applicationContext)
                loader.ensureInitializationComplete(context.applicationContext, arrayOf())
                engine!!.dartExecutor.executeDartEntrypoint(DartExecutor.DartEntrypoint.createDefault())
            }
            engineClaims++
            return engine!!;
        }

        /**
         * Unclaims the [FlutterEngine].
         * Only call this method after a [claimEngine] call.
         */
        fun releaseEngine() {
            if (engineClaims == 0)
                throw  Exception("Engine was release more times than claimed");
            engineClaims--;
            if (engineClaims == 0) {
                engine?.destroy()
                FlutterEngineCache.getInstance().remove(ENGINE_ID)
                engine = null
            }
        }
    }


    override fun onBind(intent: Intent): IBinder {
        claimEngine(this)
        return Binder()
    }

    override fun onDestroy() {
        super.onDestroy()
        releaseEngine()
    }
}
