plugins {
    id 'java'
    id 'checkstyle'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id "com.github.dkorotych.gradle-maven-exec" version "2.2.1"
    id 'maven-publish'
    id 'signing'
}

group = 'eu.cyber-geiger'
version = '0.0.2b'
description = 'communication API for GEIGER toolbox'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
    maven {
        url = uri('https://maven.totalcross.com/artifactory/repo1')
    }

    maven {
        url = uri('https://repo.maven.apache.org/maven2')
        mavenContent {
            releasesOnly()
        }
    }

    maven {
        url = uri('https://oss.sonatype.org/content/repositories/snapshots/')
        mavenContent {
            snapshotsOnly()
        }
    }
}

configurations {
    checkstyleConfig
}

dependencies {
    implementation('eu.cyber-geiger:toolbox-storage:0.3.3c-SNAPSHOT') { changing = true }
    implementation 'com.totalcross:totalcross-sdk:7.1.0'

    testImplementation group: 'com.puppycrawl.tools', name: 'checkstyle', version: '8.38'
    checkstyleConfig("com.puppycrawl.tools:checkstyle:8.38") { transitive = false }

    // junit
    //testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.11.0'
    testImplementation("junit:junit:4.13")
    //testImplementation "org.mockito:mockito-core:3.+"
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:5.7.0")

    // logging
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.12.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.12.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-jul', version: '2.12.1'

}
// no caching for modules
configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    resolutionStrategy {
        force 'xml-apis:xml-apis:1.0.b2'
    }
}

tasks.named('jar') {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version,
        )
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

jar.dependsOn shadowJar
jar.dependsOn test

check.dependsOn checkstyleMain

/* integrate junit */
test {
    systemProperty 'java.util.logging.manager', 'org.apache.logging.log4j.jul.LogManager'
    useJUnitPlatform {
        // includeTestsMatching "ch.fhnw.geiger.localstorage.Test*"
    }
    maxHeapSize = '1G'
}

checkstyle {
    toolVersion '8.38'
    config = resources.text.fromArchiveEntry(configurations.checkstyleConfig, 'google_checks.xml')
    ignoreFailures = false
    maxWarnings = 0
}

compileJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}


java {
    withSourcesJar()
    withJavadocJar()
}

def gitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}

artifacts {
    archives javadocJar, sourcesJar
}

publishing {
    repositories {
        // The repository to publish to, Sonatype/MavenCentral
        maven {
            // This is an arbitrary name, you may also use "mavencentral" or
            // any other name that's descriptive for you
            name = "sonatype"

            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = (gitBranch() == "main") ? releasesRepoUrl : snapshotsRepoUrl

            credentials {
                username findProperty('ossrhUsername')
                password findProperty('ossrhPassword')
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'toolbox-communicationApi'
            from components.java

            version = gitBranch() == "main" ? version : version + '-SNAPSHOT'

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'toolbox-communicationApi'
                description = 'The communication API required for interlinking independent plugins'
                url = 'https://github.com/cyber-geiger/toolbox-communicationAPI'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'mgwerder'
                        name = 'Martin Gwerder'
                        email = 'martin.gwerder@fhnw.ch'
                    }
                    developer {
                        id = 'sleemann'
                        name = 'Sacha Leemann'
                        email = 'sacha.leemann@fhnw.ch'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/cyber-geiger/toolbox-communicationAPI.git'
                    developerConnection = 'scm:git:ssh://github.com/cyber-geiger/toolbox-communicationAPI.git'
                    url = 'https://github.com/cyber-geiger/toolbox-communicationAPI'
                }
            }

        }

    }

}

signing {
    sign publishing.publications.mavenJava
}

jar{
    from rootProject.getProjectDir().getAbsolutePath() + "/communicationAPI-totalcross/target/install/linux_arm/communicationAPI-totalcross.tcz"
    rename '(.+).tcz', 'toolbox-communicationApiLib.tcz'
}

task packageTotalcross {
    doLast {
        mavenexec {
            workingDir rootProject.getProjectDir().getAbsolutePath() + "/communicationAPI-totalcross"
            goals '-DskipTests', 'package'
        }
    }
}

jar.dependsOn packageTotalcross

task testTotalcross {
    doLast {
        mavenexec {
            workingDir rootProject.getProjectDir().getAbsolutePath() + "/communicationAPI-totalcross"
            goals 'test'
        }
    }
}

check.dependsOn testTotalcross
